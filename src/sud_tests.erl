-module(sud_tests).
-include_lib("eunit/include/eunit.hrl").
forward1_test()->
    sud:init(),
    ?assert(sud:forward("003010002850649700070002000016080070204701609030020810000500020009273086300060900") == "(4)(9)(3)(8)(1)(7)(5)(6)(2)(8)(5)(2)(6)(4)(9)(7)(3)(1)(6)(7)(1)(3)(5)(2)(4)(9)(8)(9)(1)(6)(4)(8)(5)(2)(7)(3)(2)(8)(4)(7)(3)(1)(6)(5)(9)(7)(3)(5)(9)(2)(6)(8)(1)(4)(1)(6)(8)(5)(9)(4)(3)(2)(7)(5)(4)(9)(2)(7)(3)(1)(8)(6)(3)(2)(7)(1)(6)(8)(9)(4)(5)"),
    sud:stop().

forward2_test()->
    sud:init(),
    ?assert(sud:forward("920705003600000080004600000006080120040301070071060500000004800010000002400902061") == "(9)(2)(8)(7)(4)(5)(6)(1)(3)(6)(5)(7)(2)(1)(3)(4)(8)(9)(1)(3)(4)(6)(9)(8)(2)(5)(7)(3)(9)(6)(5)(8)(7)(1)(2)(4)(8)(4)(5)(3)(2)(1)(9)(7)(6)(2)(7)(1)(4)(6)(9)(5)(3)(8)(7)(6)(2)(1)(3)(4)(8)(9)(5)(5)(1)(9)(8)(7)(6)(3)(4)(2)(4)(8)(3)(9)(5)(2)(7)(6)(1)"),
    sud:stop().

solve1_test()->
    sud:init(),
    ?assert(sud:solve("900705003600000080004600000006080120040301070071060500000004800010000002400902001") == "(9)(2)(8)(7)(4)(5)(6)(1)(3)(6)(5)(7)(2)(1)(3)(4)(8)(9)(1)(3)(4)(6)(9)(8)(2)(5)(7)(3)(9)(6)(5)(8)(7)(1)(2)(4)(8)(4)(5)(3)(2)(1)(9)(7)(6)(2)(7)(1)(4)(6)(9)(5)(3)(8)(7)(6)(2)(1)(3)(4)(8)(9)(5)(5)(1)(9)(8)(7)(6)(3)(4)(2)(4)(8)(3)(9)(5)(2)(7)(6)(1)"),
    sud:stop().

solve2_test()->
    sud:init(),
    ?assert(sud:solve("020007000609000008000950200035000070407000809080000120001034000700000602000100030") == "(1)(2)(8)(4)(6)(7)(3)(9)(5)(6)(5)(9)(3)(1)(2)(7)(4)(8)(3)(7)(4)(9)(5)(8)(2)(6)(1)(2)(3)(5)(8)(9)(1)(4)(7)(6)(4)(1)(7)(6)(2)(3)(8)(5)(9)(9)(8)(6)(7)(4)(5)(1)(2)(3)(5)(6)(1)(2)(3)(4)(9)(8)(7)(7)(4)(3)(5)(8)(9)(6)(1)(2)(8)(9)(2)(1)(7)(6)(5)(3)(4)"),
    sud:stop().

solve3_test()->
    sud:init(),
    ?assert(sud:solve("600000084003060000001000502100074000720906035000320008305000200000050900240000007") == "(6)(5)(2)(7)(1)(9)(3)(8)(4)(4)(8)(3)(2)(6)(5)(7)(9)(1)(9)(7)(1)(4)(3)(8)(5)(6)(2)(1)(3)(8)(5)(7)(4)(6)(2)(9)(7)(2)(4)(9)(8)(6)(1)(3)(5)(5)(6)(9)(3)(2)(1)(4)(7)(8)(3)(9)(5)(8)(4)(7)(2)(1)(6)(8)(1)(7)(6)(5)(2)(9)(4)(3)(2)(4)(6)(1)(9)(3)(8)(5)(7)"),
    sud:stop().

solve4_test()->
       sud:init(),
       ?assert(sud:solve("100007090030020008009600500005300900010080002600004000300000010040000007007000300") == "(1)(6)(2)(8)(5)(7)(4)(9)(3)(5)(3)(4)(1)(2)(9)(6)(7)(8)(7)(8)(9)(6)(4)(3)(5)(2)(1)(4)(7)(5)(3)(1)(2)(9)(8)(6)(9)(1)(3)(5)(8)(6)(7)(4)(2)(6)(2)(8)(7)(9)(4)(1)(3)(5)(3)(5)(6)(4)(7)(8)(2)(1)(9)(2)(4)(1)(9)(3)(5)(8)(6)(7)(8)(9)(7)(2)(6)(1)(3)(5)(4)"),
       sud:stop().
